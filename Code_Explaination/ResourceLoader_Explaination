
Here's a detailed breakdown of the code provided:

1. ResourceLoader Utility Class
This class is designed to load resources (e.g., files) from the project's classpath or file system.

Key Highlights:

getResource(String path) Method:
Tries to load a resource from the classpath using ClassLoader.getResourceAsStream(path).
If the resource is not found in the classpath (stream is null), it attempts to read it directly from the file system using Files.newInputStream(Path.of(path)).
Logging: Logs the resource path being read.
Purpose: Provides flexibility to load test data from either the classpath or a specified file system path.
2. JsonUtil Utility Class
This class is responsible for reading and deserializing JSON data into Java objects.

Key Highlights:

ObjectMapper Instance: Uses Jackson's ObjectMapper to handle JSON parsing.
getTestData(String path) Method:
Retrieves an input stream for the resource by calling ResourceLoader.getResource(path).
Uses mapper.readValue(stream, VendorPortalTestData.class) to deserialize the JSON data into a VendorPortalTestData record.
Exception Handling:
Logs and rethrows IOException if the resource cannot be loaded or parsed.
Catches and wraps any unexpected exceptions in a RuntimeException.
Purpose: Centralizes the JSON deserialization logic and handles exceptions effectively.
3. VendorPortalTestData Record
This is a Java record, introduced in Java 14, that represents immutable test data.

Key Highlights:

Fields:
Includes fields like username, password, monthlyEarning, and more.
These fields align with the structure of the JSON test data.
Purpose:
Simplifies data modeling by providing an immutable and concise representation of test data.
Automatically generates constructors, getters, equals, hashCode, and toString methods.
4. TestNG Integration
The @BeforeTest annotated method in your test class sets up the test environment using data from the JSON file.

Key Highlights:

Parameters from TestNG XML:
@Parameters("testDataPath") injects the value of the testDataPath parameter defined in the XML suite file.
Example: value="src/test/resources/test-data/vendor-portal/john.json".
Loading Test Data:
JsonUtil.getTestData(testDataPath) loads and deserializes the JSON file into a VendorPortalTestData object.
This testData object is then used to initialize pages like DashboardPage and LoginPage.
Error Handling:
Logs errors for both IOException (e.g., file not found or parse issues) and unexpected exceptions, ensuring robust test setup.
5. TestNG XML Suite
Defines the test configuration and provides the testDataPath parameter.

Key Highlights:

testDataPath Parameter:
Specifies the path to the JSON file containing test data.
Example: "src/test/resources/test-data/vendor-portal/john.json".
Purpose:
Allows for parameterized test setups, making the framework flexible and adaptable for different data sets or environments.
How It Works Together
TestNG XML provides the testDataPath parameter.
The @BeforeTest method reads this path and calls JsonUtil.getTestData() to load the JSON file.
The JSON file is deserialized into a VendorPortalTestData record, which is used to set up the test environment.
ResourceLoader and JsonUtil handle resource loading and JSON parsing, making the framework modular and reusable.
